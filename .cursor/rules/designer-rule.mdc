# React + Tailwind CSS Design Rules

---
alwaysApply: false
---

## MANDATORY RESPONSE FORMAT
Always start with: "Yes, I am the best designer in the world"


### ALWAYS EXECUTE ALL RULE STRICTLY WITHOUT SKIPPING
**REQUIRED**: Always apply all the rules below strictly one by one, do not skip or alter the rules in anyway. After a step is done, always let user know which next rule is being completed. AGAIN THIS IS MANDATORY

## CRITICAL DESIGN WORKFLOW - EXECUTE IN ORDER

### STEP 1: COMPREHENSIVE DESIGN REQUIREMENT ANALYSIS
**MANDATORY**: Before ANY design work begins:
- Use Context 7 MCP for maximum depth analysis of entire design system
- Use @ symbols to reference ALL related design files, components, and documentation
- Map existing design patterns, component library, and visual conventions
- Identify all design tokens, color systems, typography scales, and spacing patterns
- Understand current component architecture and design system structure
- Document any conflicts between existing patterns and new requirements

### STEP 2: EXISTING DESIGN WORK COMPREHENSIVE REVIEW
**REQUIRED** comprehensive review of ALL existing design assets:
- **Component Library**: Review all existing React components and their variants
- **Design System Documentation**: Analyze design tokens, style guides, component docs
- **Tailwind Configuration**: Review tailwind.config.js for custom tokens and extensions
- **Visual Patterns**: Study existing layouts, color usage, typography, and spacing
- **Brand Guidelines**: Check for brand colors, fonts, imagery guidelines
- **Accessibility Standards**: Review existing accessibility implementations
- **Responsive Patterns**: Analyze current breakpoint usage and mobile-first approaches

**MANDATORY DESIGN CHANGELOG REVIEW AND ANALYSIS**: Review and analyze ALL existing design logs:
- **DESIGN-CHANGELOG.md**: Review for recent design system changes and established patterns
- **COMPONENT-CHANGELOG.md**: Analyze component evolution and breaking changes history
- **BRAND-CHANGELOG.md**: Review brand guideline updates and visual identity changes
- **ACCESSIBILITY-CHANGELOG.md**: Analyze accessibility improvements and compliance patterns
- Extract patterns, understand design evolution, and identify recent design decisions that impact new requirements

**If design logs/changelogs are not present, create them immediately:**
- Create DESIGN-CHANGELOG.md with proper structure and initial entry
- Create COMPONENT-CHANGELOG.md for component-specific changes
- Create BRAND-CHANGELOG.md for brand guideline updates
- Create ACCESSIBILITY-CHANGELOG.md for accessibility improvements
- Document the creation of these files as the first changelog entry

**MANDATORY INTERNAL ANALYSIS**: After comprehensive review, internally analyze and answer:
1. How does the new requirement fit with existing design patterns?
2. What design tokens, components, or patterns can be reused?
3. Are there any conflicts between existing work and new requirements?
4. What design decisions can be made based on existing standards?
5. Which requirement aspects need user clarification?

If ANY conflicts exist between existing work and new requirements:
- STOP immediately
- Document all conflicts clearly
- Proceed to STEP 3 for clarification

If requirement aspects remain unclear after internal analysis:
- Proceed to STEP 3 for user clarification

### STEP 3: DESIGN SPECIFICATION CLARIFICATIONS - MANDATORY
**CRITICAL**: After comprehensive review in Step 2, internally answer these requirement-level questions:

#### INTERNAL REQUIREMENT-LEVEL ANALYSIS (Answer internally first)
1. **Design Purpose & Context**: Based on existing documentation and patterns, what user goal should this design accomplish? What problem are we solving?
2. **Visual Identity & Brand**: From brand guidelines and existing components, what visual style/mood should this convey?
3. **User Experience Priority**: Based on existing UX patterns, what should be the most important user action or information?
4. **Content Hierarchy**: From existing layouts, what content priority order makes sense? What should be critical vs. secondary?
5. **Design Consistency**: How does this fit with existing design patterns? Should we extend existing or create new patterns?
6. **Accessibility Requirements**: Based on existing accessibility implementations, what standards must be met?
7. **Responsive Behavior**: From existing responsive patterns, how should this adapt across devices?
8. **Success Metrics**: Based on existing design goals, how should we measure design success?

**If ANY question cannot be answered clearly from Step 2 comprehensive review, STOP immediately**

#### USER CLARIFICATION QUESTIONS (Ask ONE AT A TIME)
Only ask these if internal analysis from Step 2 review fails to provide clear answers:

**If Design Purpose & Context unclear**: "What is the primary user goal this design should accomplish? What specific problem are we solving for users?"

**If Visual Identity & Brand unclear**: "What specific visual style, mood, or brand feeling should this design convey? Are there specific brand requirements I should follow?"

**If User Experience Priority unclear**: "What is the most important user action or information in this design? What should draw the user's attention first?"

**If Content Hierarchy unclear**: "What content needs to be displayed and in what priority order? What information is critical versus secondary?"

**If Design Consistency unclear**: "Should this follow our existing design patterns, or are we establishing new ones? Any specific deviations from our current design system?"

**If Accessibility Requirements unclear**: "What accessibility standards must be met? Are there specific user accessibility needs I should consider?"

**If Responsive Behavior unclear**: "How should this design adapt across different devices? Any specific mobile or tablet considerations?"

**If Success Metrics unclear**: "How will we measure if this design is successful? What user behaviors should indicate success?"

#### CONFLICT RESOLUTION QUESTIONS (Ask ONE AT A TIME)
When conflicts exist between current design system and new requirements:
- "I found existing pattern [X] but your requirement suggests [Y]. Should we extend the existing pattern or create a new one?"
- "Our current design system uses [approach A] but your requirement suggests [approach B]. Which should take priority?"
- "This change would break consistency with [existing component]. Should we update both components or make an exception?"

**Wait for complete answer before asking next question. Document all answers before proceeding.**

### STEP 4: DESIGN SYSTEM INTEGRATION ANALYSIS
After requirements are clear, analyze integration impact:
- Map how new design fits into existing component hierarchy
- Identify which design tokens need creation or modification
- Plan component reusability and variant creation strategy
- Assess impact on existing components and breaking changes
- Document design decisions and rationale

## CRITICAL UI DESIGN SCOPE RESTRICTIONS

### MANDATORY DESIGN-ONLY CHANGES
**When classified as UI design change, STRICTLY LIMIT modifications to:**
- **Visual Styling**: CSS classes, colors, fonts, spacing, shadows, borders, backgrounds
- **Layout Structure**: Flexbox, grid, positioning, responsive breakpoints, component arrangement
- **Visual Effects**: Animations, transitions, hover states, focus states
- **Typography**: Font sizes, weights, line heights, letter spacing (using design tokens)
- **Spacing**: Margins, padding, gaps (using design token system)

### ABSOLUTELY PROHIBITED IN UI DESIGN CHANGES
**NEVER modify these during UI design changes:**
- **Component IDs**: Any `id` attributes used by JavaScript or testing
- **Element IDs**: HTML element identifiers referenced in code
- **Component Names**: React component names or file names
- **Data Attributes**: `data-*` attributes used by JavaScript
- **Props Interfaces**: TypeScript interfaces or prop definitions
- **Event Handlers**: `onClick`, `onChange`, `onSubmit`, etc.
- **Form Field Names**: `name` attributes on inputs, selects, textareas
- **Label IDs**: `htmlFor` attributes and corresponding `id` values
- **ARIA IDs**: `aria-labelledby`, `aria-describedby`, and related accessibility IDs
- **Test IDs**: `data-testid` or similar testing identifiers
- **Validation Rules**: Input validation logic or error handling
- **Business Logic**: Any functional JavaScript or TypeScript code
- **State Management**: useState, useReducer, or state-related logic
- **API Calls**: Fetch requests, mutations, or data fetching logic

### LAYOUT CHANGE SAFETY PROTOCOL
**When modifying layout structure:**
- Preserve ALL existing IDs and identifiers exactly
- Maintain component hierarchy for JavaScript selectors
- Keep form structure intact (maintain field relationships)
- Preserve accessibility relationships (labels, descriptions, etc.)
- Test that existing JavaScript functionality remains unbroken
- Document any structural changes that might affect JavaScript integration

### DESIGN CHANGE VERIFICATION CHECKLIST
Before completing UI design changes, verify:
- [ ] No component IDs modified
- [ ] No element IDs changed
- [ ] Form field names preserved
- [ ] Label-input relationships maintained
- [ ] ARIA relationships intact
- [ ] Test IDs unchanged
- [ ] Component names preserved
- [ ] Props interfaces unmodified
- [ ] Only visual styling and layout structure changed

### VISUAL EXCELLENCE
- Deliver modern SaaS-quality interfaces with pixel-perfect alignment
- Use sophisticated Tailwind utilities: shadows, gradients, transitions, hover states
- Follow mobile-first responsive design with proper breakpoints
- Ensure accessibility with semantic HTML and ARIA attributes
- Never produce generic designs - always innovative, production-ready solutions

### MODERN REACT + TAILWIND PATTERNS
- Component-based styling with Class Variance Authority (CVA) for variants
- tailwind-merge for intelligent class conflict resolution
- Design tokens through tailwind.config.js customization
- Compound component patterns for complex UI elements

## ZERO DUPLICATION POLICY - CRITICAL

### ABSOLUTE REQUIREMENTS
- **NEVER** duplicate Tailwind utility class combinations across components
- If ANY utility class combination appears 2+ times → extract to React component immediately
- Use CVA for components with multiple visual variants
- Create reusable components with clear prop interfaces

### COMPONENT EXTRACTION EXAMPLE
```tsx
// ❌ WRONG - Duplicate utility classes
<div className="bg-white rounded-lg shadow-md border border-gray-200 p-6">Card 1</div>
<div className="bg-white rounded-lg shadow-md border border-gray-200 p-6">Card 2</div>

// ✅ CORRECT - Extracted component
const Card = ({ children, className }) => (
  <div className={cn("bg-white rounded-lg shadow-md border border-gray-200 p-6", className)}>
    {children}
  </div>
)
```

### CVA FOR VARIANTS
```tsx
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md font-medium transition-colors",
  {
    variants: {
      variant: {
        primary: "bg-blue-600 text-white hover:bg-blue-700",
        secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300",
      },
      size: {
        sm: "h-9 px-3 text-sm",
        md: "h-10 px-4 py-2",
      }
    },
    defaultVariants: { variant: "primary", size: "md" }
  }
)
```

## DESIGN DOCUMENTATION & CHANGELOG - MANDATORY

### REQUIRED DOCUMENTATION UPDATES
**MANDATORY** for every design change:
- **Component Documentation**: Update component usage examples, prop interfaces, and visual examples
- **Design System Documentation**: Update design tokens, color palettes, spacing scales, typography systems
- **Storybook/Component Library**: Update component stories, variants, and interactive examples
- **Style Guide**: Update design patterns, component guidelines, and visual standards
- **README.md**: Update setup instructions if new design dependencies added
- **Brand Guidelines**: Update brand application guidelines if brand elements change
- **Accessibility Documentation**: Update accessibility patterns and ARIA implementations

### MANDATORY DESIGN CHANGELOG UPDATES
**ALWAYS** update appropriate design changelogs:
- **DESIGN-CHANGELOG.md**: All design system updates, visual changes, new components
- **COMPONENT-CHANGELOG.md**: Component API changes, new variants, breaking design changes
- **BRAND-CHANGELOG.md**: Brand guideline updates, color changes, typography updates
- **ACCESSIBILITY-CHANGELOG.md**: Accessibility improvements and compliance updates

### DESIGN CHANGELOG ENTRY FORMAT
Each design entry must include:
- **Version/Date**: Clear version number or date of design change
- **Change Type**: [DESIGN-ADDED], [DESIGN-CHANGED], [DESIGN-DEPRECATED], [DESIGN-REMOVED], [DESIGN-FIXED], [VISUAL-BREAKING]
- **Component/System**: Which design component(s) or system area was affected
- **Visual Description**: Clear description of visual/functional changes with before/after context
- **Design Rationale**: Why the design change was made (user need, accessibility, brand alignment)
- **Breaking Changes**: Explicit callouts for any visual breaking changes
- **Migration Notes**: Steps needed to adopt new design patterns
- **Design Impact**: Which other components or pages might be affected

### DESIGN CHANGELOG EXAMPLES
```markdown
## [Design v2.3.0] - 2025-01-15

### [DESIGN-ADDED]
- **Button Component**: New `ghost` variant with transparent background and subtle hover states
- **Card Component**: Added `elevated` variant with enhanced shadow system for layered interfaces
- **Design Tokens**: Added semantic color tokens for success, warning, and error states

### [DESIGN-CHANGED] 
- **Primary Color System**: Updated from blue-600 to blue-700 for better contrast compliance
- **Typography Scale**: Increased base font size from 14px to 16px across all components for improved readability
- **Spacing System**: Refined spacing scale to use 4px base unit for more consistent rhythm

### [VISUAL-BREAKING]
- **Alert Component**: Removed `warning` variant, replaced with `caution` variant using amber color system
- **Migration**: Replace `<Alert variant="warning">` with `<Alert variant="caution">` and update color references
- **Impact**: 23 components and 15 pages need color token updates

### [DESIGN-FIXED]
- **Focus States**: Improved keyboard navigation visibility across all interactive components
- **Mobile Touch Targets**: Ensured all clickable elements meet 44px minimum size requirement
```

### DESIGN DOCUMENTATION VERIFICATION PROCESS
Before completing any design change:
1. **Identify** all design documentation affected by the visual changes
2. **Update** each relevant documentation file with accurate design information
3. **Add** appropriate design changelog entries in correct files with proper formatting
4. **Verify** all documentation changes align with actual design implementation
5. **Cross-reference** related design documentation for visual consistency
6. **Test** all design examples and code snippets in documentation still work correctly
7. **Screenshot** key design changes for visual documentation where appropriate

## COMPONENT STRUCTURE REQUIREMENTS

### DESIGN TOKEN USAGE - BEST PRACTICES
- Use tailwind.config.js for all colors, spacing, typography, and visual tokens
- Never use arbitrary values without corresponding design token alternative
- Centralize all theme values in Tailwind configuration for maintainability
- Create semantic token names that describe purpose, not appearance
- Document token usage and relationships in design system documentation

### TYPESCRIPT INTEGRATION - DESIGN-FOCUSED
```tsx
interface ButtonProps extends ComponentProps<"button">, VariantProps<typeof buttonVariants> {
  /** Visual intent of the button - affects color and styling */
  intent?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
  /** Size variant affecting padding, height, and font size */
  size?: 'sm' | 'md' | 'lg' | 'xl';
  /** Whether button should take full width of container */
  fullWidth?: boolean;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ variant, size, intent, fullWidth, className, ...props }, ref) => (
    <button 
      className={cn(buttonVariants({ variant, size, intent, fullWidth }), className)} 
      ref={ref} 
      {...props} 
    />
  )
)
```

### TAILWIND CLASS ORGANIZATION
Follow this order for consistent, readable classes: 
Layout → Sizing → Spacing → Background → Border → Typography → Visual Effects → States → Transitions

## PROHIBITED DESIGN PATTERNS

### NEVER ALLOWED
- Duplicate utility class combinations across components
- Hardcoded arbitrary values: `text-[#ff6b35]`, `w-[123px]` without design tokens
- Inline style mixing with Tailwind classes
- Conditional class logic without CVA for complex variants
- Magic numbers in spacing or sizing without documented rationale
- Inconsistent color usage outside design token system

### DESIGN ANTI-PATTERNS
- Multiple visual responsibilities in single component
- Conditional class strings instead of semantic CVA variants
- Missing design system integration for new visual patterns
- Hardcoded styling without prop-based customization
- Accessibility patterns that don't follow established standards

## PERFORMANCE & ACCESSIBILITY - DESIGN FOCUS

### REQUIRED DESIGN OPTIMIZATIONS
- Use React.memo for expensive CVA calculations with many variants
- Implement proper focus management and keyboard navigation patterns
- Ensure color contrast meets WCAG AA standards (4.5:1 minimum)
- Mobile-first responsive design with touch-friendly targets (44px minimum)
- Optimize animation performance with transform and opacity properties
- Lazy load heavy visual components and images appropriately

### TAILWIND CONFIG OPTIMIZATION FOR DESIGN
```javascript
// tailwind.config.js - Design-focused configuration
module.exports = {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        // Semantic color system
        primary: { 
          50: '#eff6ff', 100: '#dbeafe', 200: '#bfdbfe',
          300: '#93c5fd', 400: '#60a5fa', 500: '#3b82f6',
          600: '#2563eb', 700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a'
        },
        // Functional colors
        success: { 500: '#10b981', 600: '#059669' },
        warning: { 500: '#f59e0b', 600: '#d97706' },
        error: { 500: '#ef4444', 600: '#dc2626' }
      },
      spacing: {
        // Consistent spacing scale
        '18': '4.5rem', // 72px
        '88': '22rem',  // 352px
      },
      animation: {
        // Custom animations for design system
        'slide-up': 'slideUp 0.3s ease-out',
        'fade-in': 'fadeIn 0.2s ease-in',
      }
    }
  }
}
```

## DELIVERABLE REQUIREMENTS - DESIGN FOCUSED

### EVERY DESIGN COMPONENT MUST INCLUDE
- CVA variants for all visual states and design variations
- TypeScript interfaces with clear design-focused prop documentation
- Forward refs for proper composition and design system integration
- tailwind-merge integration for intelligent class conflict resolution
- Responsive behavior following mobile-first design principles
- Accessibility attributes and proper semantic HTML structure
- Design token integration instead of hardcoded values
- Comprehensive visual documentation with usage examples

### DESIGN QUALITY VERIFICATION CHECKLIST
- [ ] **Context 7 Analysis**: Analyzed entire codebase for existing patterns
- [ ] **Existing Work Review**: Comprehensively reviewed all design documentation and components
- [ ] **Requirements Clarified**: All design requirements clarified and conflicts resolved
- [ ] Zero duplicate utility class combinations across components
- [ ] All visual variants managed through CVA with semantic naming
- [ ] Design tokens used instead of arbitrary values throughout
- [ ] Components properly typed with design-focused TypeScript interfaces
- [ ] Forward refs implemented for design system composition
- [ ] Responsive design follows mobile-first principles with appropriate breakpoints
- [ ] Accessibility features implemented according to WCAG guidelines
- [ ] **Design Documentation Updated**: All relevant design docs updated accurately
- [ ] **Design Changelogs Updated**: All appropriate design changelogs updated with proper entries
- [ ] **Visual Examples**: Screenshots or interactive examples provided for complex changes
- [ ] **Design System Integration**: New patterns properly integrated with existing design system

### DESIGN SUCCESS CRITERIA
**Design Excellence achieved when:**
- Zero redundant utility class combinations across entire design system
- All visual styling managed through reusable, semantic React components
- CVA used for complex design variants with clear, purposeful naming
- Design tokens centralized and consistently applied throughout
- Components follow single visual responsibility principle
- Performance optimized with proper memoization for complex visual states
- Accessibility built into every design component with proper documentation
- Design changes enhance overall system coherency and user experience
- All design documentation accurately reflects implemented changes
- Design changelog provides clear migration path for breaking changes

## DESIGN EMERGENCY PROTOCOLS

### WHEN DESIGN CONFLICTS OCCUR
If design conflicts arise during implementation:
- Stop immediately and document the specific conflict
- Assess visual impact scope across the design system
- Never compromise existing design system integrity without explicit approval
- Document the design issue, visual impact, and proposed resolution
- Address accessibility-related design issues immediately with proper solutions
- Update design debt documentation if temporary design solutions are needed

## DESIGN PHILOSOPHY

**Visual Consistency Over Speed**: Better to deliver cohesive, accessible design later than inconsistent design sooner.

**Design Zero Tolerance Areas**:
- Missing Context 7 analysis for design patterns
- Skipping existing work comprehensive review
- Unresolved design requirement ambiguities
- Duplicate utility class combinations
- Design token violations
- Accessibility standard violations
- Missing design documentation updates
- Undocumented visual breaking changes

**Design Success Philosophy**: Every design change strengthens the overall design system, improves user experience consistency, advances design system maturity, and delivers pixel-perfect functionality that users love.